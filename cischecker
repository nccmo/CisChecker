#!/usr/bin/env python3

from cischecker.run import *
import argparse

####################
# top level parser
parser = argparse.ArgumentParser(prog="cischecker", formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument("--version", action="version", version="cischecker-0.1.0")

subparsers = parser.add_subparsers()

####################

####################
# listing function
listing = subparsers.add_parser("listing", 
                                help="Make multiple mutation list from A Mutation Annotation Format (MAF) file (.maf)")

listing.add_argument("MAF_file", metavar="input.maf", type=str,
                     help="path to input MAF file")

listing.add_argument("output_file", metavar="output_file", type=str,
                     help="path to output file")

listing.add_argument("-g", "--gene", type=str, default="",
                     help="specify the gene you want to check (if you want to choose multiple genes, separate them with colon) (default: all genes)")

listing.add_argument("-s", "--sample", type=str, default="",
                     help="specify the sample you want to check (if you want to choose multiple samples, separate them with colon) (default: all samples)")

listing.add_argument("-v", "--vaf", default=False, action='store_true', help="use VAF (variant allele fraction) information")

listing.set_defaults(func=listing_main)

####################

####################
# cis check function

cis_check = subparsers.add_parser("cis_check",
                                  help="merge, compress and index break point file generated by parse function",
                                  formatter_class=argparse.ArgumentDefaultsHelpFormatter)

cis_check.add_argument("multiple_mutation_list", default=None, type=str,
                       help="path to multiple mutation file (generated by listing function)")

cis_check.add_argument("sample_list", metavar="sample_list.txt", type=str,
                       help="path to sample list")

cis_check.add_argument("output_file", default=None, type=str,
                       help="path to output file")

cis_check.add_argument("--baseq", default=0, type=int,
                       help="Minimum base quality (samtools option; default = 0)")

cis_check.add_argument("--mapq", default=0, type=int,
                       help="Minimum mapping quality (samtools option; default = 0)")

cis_check.add_argument("--overlaps", default=True, action='store_false',
                       help="If set to True, detect if read pairs overlap and only take the higher quality base (samtools option; default True)")

cis_check.add_argument("--stepper", choices=["all", "nofilter", "samtools"], default="all", 
                       help="The stepper controls how the iterator advances. (samtools option; default all)")

cis_check.add_argument("--orphans", default=True, action='store_false',
                       help="Ignore orphans (paired reads that are not in a proper pair) (samtools option; default True)")

cis_check.add_argument("-v", "--vaf", default=False, action='store_true', help="use VAF (variant allele fraction) information")

cis_check.add_argument("-m", "--mapping_difference", default=False, action='store_true', 
                       help="Indel mapping differs between mapping tools. If MAF file and BAM file were mapped with a different mapping tool (or same tool with different parameters), use this argument.")

cis_check.add_argument("-d", "--debug", default=False, action='store_true', help="debug function")

cis_check.set_defaults(func=cis_check_main)

####################

# Parse arguments and call the appropriate function
args = parser.parse_args()
args.func(args)
